System   parkingservice
  
Request reqenter : reqenter(V)
Reply slotsnum : slotsnum(SLOTNUM)
Reply waitIndoor : slotsnum(V)

Request carenter : carenter(V)
Reply receipt  : receipt(INDOORTOKEN)

Dispatch pickup : pickup(OUTDOORTOKEN)

//------------------------------------------------------------------------------------------------
Dispatch startthermometer : thermometer(V)
Dispatch restart : restart(V)
Dispatch startfan : fan(V)
Dispatch stopfan : stopfan(V)
//------------------------------------------------------------------------------------------------

Event timeout 			: timeout(V)
Event carindoorarrival  : cia(V)
Event caroutdoorarrival : coa(V)
Event carwithdrawn		: cw(V)
Event weightsensor		: weight(W)
Event alarm 			: timeout(alarm)

//------------------------------------------------------------------------------------------------
// forse non servono piu
Event temp				: temp(V)
Event normtemp			: norm(V)
//------------------------------------------------------------------------------------------------


Context ctxParkingservice  ip [host="localhost" port=5683]
      

CodedQActor outsonar context ctxParkingservice className "sonarSimulator"
CodedQActor weightsensor context ctxParkingservice className "weightsensorSimulator"

//------------------------------------------------------------------------------------------------
CodedQActor thermometer context ctxParkingservice className "thermometerSimulator"
CodedQActor fan context ctxParkingservice className "fanSimulator"
//------------------------------------------------------------------------------------------------

/* 
 * ------------------------------------------------------------------
 *   TODO: 
 * 
 * 			DOCS (sprint 1):  
 *					� Spiegazione del perch� dei tagli nei requisiti
 * 					� Descrizione formale test (Previo funzionamento dei test in JUnit) 
 * 			
 * 			General: 
 * 					� Far funzionare termometro e fan
 * 					� Cercare qualche metodo per fare i  test in JUnit (sia Sprint1 e Sprint2)
 *			
 * 			Sprint 3: 
 * 					� Pensare a come far funzionare il trolley
 * 
 * 
 * Assumptions :
 *
 * � no GUIs, but simulated clients (by QActor or Jupyter Notebook)
 * � no handling of Timeout alarm 
 * � state of Trolley is not consider
 * � No real Trolley movements
 * � No start/stop by Human Manager
 * � A first handling of TokenId (security)
 * ------------------------------------------------------------------
*/  

// Decommentare se NON si usa Jupyter Notebook


QActor client context ctxParkingservice{
	[# 
		var CLIENTDONE  = 0
		var SLOTNUM 	= 0 //slot assegnato
		var TOKENID 	= "0"
	#]
	State s0 initial{
		println("Client mock simulation START | CLIENT")
	} Transition t0
					whenTime 4000 -> init
	 
	State init{
	}
	
	
	State requestToEnter{
		[# var t = kotlin.random.Random.nextLong(2000,4000) #]
		[# delay(t) #]
		println("client notify his interest in entering | CLIENT")
		request parkingmanagerservice -m reqenter : reqenter(client)
	} Transition t0 
					whenReply waitIndoor -> noImmediatlyEntry
					whenReply slotsnum -> cartoindoor
	
	
	State noImmediatlyEntry{
		delay 3000
	} Goto cartoindoor
	
	
	State cartoindoor{
		onMsg(slotsnum : slotsnum (SLOTNUM)){
			[# SLOTNUM = payloadArg(0).toInt() #]	
			if [# SLOTNUM > 0 #]{
				println("SLOTNUM = $SLOTNUM . Moving car to Indoor | CLIENT") 
				request parkingmanagerservice -m carenter : carenter(V) 
			}
		}	
	}
	Transition t0 
					whenReply receipt -> afterreceipt


	State afterreceipt{
		onMsg(receipt : receipt (TOKENID)){
			[# TOKENID = payloadArg(0) #]
			updateResource [# "TOKENID" #]
			println("client's TOKENID is $TOKENID | CLIENT")
			[# var t1 = kotlin.random.Random.nextLong(3000, 6000)
			 delay(15000) #]
		}
	} Goto reqpickup  

	State reqpickup{
		println("client notify his interest in picking his car | CLIENT")
		forward parkingmanagerservice -m pickup : pickup($TOKENID)
	} Transition t0 
					whenEvent caroutdoorarrival -> pickupcar
	
	
	State pickupcar{
		delay 2000 //in 2 secondi porta via l'auto da OUTDOOR
		emit carwithdrawn : cw(bye)
		[# CLIENTDONE = CLIENTDONE + 1 #]
	} Goto stop if [# CLIENTDONE == 4 #] else requestToEnter 
	
	
	State stop{
		println("No more clients") 
	}
	 
}

//---------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------//

QActor parkingmanagerservice context ctxParkingservice{
	[#
	lateinit var weightSensorActor : ActorBasic
	lateinit var outSonarActor : ActorBasic
	lateinit var thermometerActor : ActorBasic
 	lateinit var fanActor : ActorBasic
	
	
	var SLOTNUM = 1
	var INDOORTOKEN  = "1" //tokenid dato al client
	var WEIGHT 		  = 0
	
	var OUTDOORTOKEN = "1" //tokenid ricevuto dal client
	var CARSLOTNUM =  0
	
	#]
	
	State s0 initial{
		[#
		outSonarActor     = sysUtil.getActor("outsonar")!!
		weightSensorActor = sysUtil.getActor("weightsensor")!!
		thermometerActor = sysUtil.getActor("thermometer")!!
		fanActor = sysUtil.getActor("fan")!!
		#]	
	forward thermometer -m startthermometer : thermometer(V)
	println("Park System START | SERVICE")
	}
	Transition t0
			whenTime 1000 -> check
	
	
	State check{
		delay 5000
	}
	Goto okReqenter if [#	`it.unibo`.utils.ParkingSlotsKb.checkSlots() > 0 #] 
		else checkOutdoor
		

	State okReqenter{
	} Goto ready if [# `it.unibo`.utils.ParkingSlotsKb.outdoorFree #] 
				else readyOnlyIndoor
				
	
	State checkOutdoor{
	}Goto readyOnlyOutdoor if [# `it.unibo`.utils.ParkingSlotsKb.outdoorFree #] 
				else notReady
						
								
	State ready{
		println("INDOOR and OUTDOOR Avaiable | SERVICE")
	}Transition t0 
					whenTime 	5000	 -> moveToHome
					whenRequest reqenter -> acceptin
					whenMsg		pickup	 -> acceptout

				
				
	State readyOnlyIndoor{
		println("INDOOR Avaiable | SERVICE")
	}Transition t0
					whenTime 5000 		 -> moveToHome
					whenRequest reqenter -> acceptin
					

	State readyOnlyOutdoor{
		println("OUTDOOR Avaiable | SERVICE")
	}Transition t0
					whenTime 5000 		 -> moveToHome
					whenMsg		pickup	 -> acceptout
					
					
					
	State notReady{
	}Transition t0
					whenTime 5000 -> moveToHome
	
	
	State moveToHome{
		println("Moving Trolley to HOME")
		updateResource[# "toHome(V)" #]
		//move to Home [TODO: invia comando a trolley]
	} Goto check
 	
 	
	State acceptin{
			[#
			SLOTNUM = `it.unibo`.utils.ParkingSlotsKb.findSlot()
			`it.unibo`.utils.ParkingSlotsKb.setSlot(SLOTNUM, false)
			#]
			//================[ acceptIN ]=====================	
			[# if(! `it.unibo`.utils.ParkingSlotsKb.indoorFree){ #]
				replyTo reqenter with waitIndoor : slotsnum ($SLOTNUM)
				updateResource [# "wait(${SLOTNUM}) " #]
			[# } #]
			[# else {#]
			updateResource [# "slotnum(${SLOTNUM}) " #]
			//================[ informIN ]=====================
			replyTo reqenter with slotsnum : slotsnum ($SLOTNUM)
			println("SLOTNUM = $SLOTNUM | SERVICE" )
			//================[ moveToIn ]=====================
			println("Trolley is moving to Indoor | SERVICE")
			[# } #]		
	} Transition t0
					whenRequest carenter -> carenter
					
	
	State carenter{
		emit carindoorarrival : cia(car_arrived) //suppose that the car is actually in INDOOR-Area
	} Transition t0
			whenEvent weightsensor -> weightcheck
			
			
	State weightcheck{
		onMsg(weightsensor : weight(W)){
			[# 
				WEIGHT = payloadArg(0).toInt()
				println("Weight: " + WEIGHT)
			#] 
			}
	} Goto moveToSlotIn if [# WEIGHT > 0 #] else weightError	//check if car is actual in INDOOR		
	
	
	State moveToSlotIn{
		//========================[ moveToSlotIN ]========================
		println("Trolley moves from INDOOR to slot $SLOTNUM | SERVICE")
		[# `it.unibo`.utils.ParkingSlotsKb.indoorFree  = true #]
	} Goto receipt 
			
		
	State receipt{ 
		[# 	INDOORTOKEN = `it.unibo`.utils.ParkingSlotsKb.generateToken(SLOTNUM) #]
		/*==========[receipt]==========*/
		replyTo carenter with receipt : receipt($INDOORTOKEN)
		updateResource [# "receipt($INDOORTOKEN)" #]
		/*==========[moveToHome]==========*/
		println("Trolley moves to Home | SERVICE")
	} Transition t0 
					whenTime 1000 -> check  //simuliamo il ritorno ad Home del Trolley
		
		
	State weightError{ 
		println("Car not actual in INDOOR-AREA")
	} Goto check				
		
	
	State acceptout{
		//===========[ acceptOUT / findSlot ]=====================
		onMsg (pickup : pickup(OUTDOORTOKEN)){
				[#  OUTDOORTOKEN = payloadArg(0).toString() #]
			}
			[# 	CARSLOTNUM = `it.unibo`.utils.ParkingSlotsKb.checkToken(OUTDOORTOKEN) #]
		updateResource [# "pickup($CARSLOTNUM)" #]
	} Goto picking if [# CARSLOTNUM > 0 #] else tokenError
	
	
	State moveToSlotOut{
		//====================[moveToSlotOut]========================
		println("Trolley moves to slot $CARSLOTNUM | SERVICE")
	}
	
	                                                                 
	State picking{	 	
		//====================[moveToOut]========================
		println("Trolley picking car from slot $CARSLOTNUM | SERVICE")
		delay 3000
		[# `it.unibo`.utils.ParkingSlotsKb.setSlot(CARSLOTNUM, true) #]
		println("Car is in Outdoor area | SERVICE")
		//[# `it.unibo`.utils.ParkingSlotsKb.outdoorFree  = false #] 
		emit caroutdoorarrival : coa(car_outdoor)  //deve essere percepito da "outsonar"
	}
	Transition t0 	
				whenTime  100	-> check
					
	
	State tokenError{
		println("Invalid insert Token!")
	} Goto ready
	 		
	 			
}


