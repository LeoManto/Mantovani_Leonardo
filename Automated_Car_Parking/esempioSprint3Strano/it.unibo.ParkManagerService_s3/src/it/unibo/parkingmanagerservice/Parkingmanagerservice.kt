/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			lateinit var weightSensorActor : ActorBasic
			lateinit var outSonarActor : ActorBasic
			lateinit var thermometerActor : ActorBasic
		 	lateinit var fanActor : ActorBasic
			
			
			var SLOTNUM = 1
			var INDOORTOKEN  = "1" //tokenid dato al client
			
			var OUTDOORTOKEN = "1" //tokenid ricevuto dal client
			var CARSLOTNUM =  0
			
			var GOAL = ""
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						
								outSonarActor     = sysUtil.getActor("outsonar")!!
								weightSensorActor = sysUtil.getActor("weightsensor")!!
								thermometerActor = sysUtil.getActor("thermometer")!!
								fanActor = sysUtil.getActor("fan")!!
						forward("startthermometer", "thermometer(V)" ,"thermometer" ) 
						println("Park System START | SERVICE")
					}
					 transition( edgeName="goto",targetState="check", cond=doswitch() )
				}	 
				state("check") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="okIndoor", cond=doswitchGuarded({ `it.unibo`.utils.ParkingSlotsKb.indoorFree && 
										 	`it.unibo`.utils.ParkingSlotsKb.checkSlots() > 0  
					}) )
					transition( edgeName="goto",targetState="checkOutdoor", cond=doswitchGuarded({! ( `it.unibo`.utils.ParkingSlotsKb.indoorFree && 
										 	`it.unibo`.utils.ParkingSlotsKb.checkSlots() > 0  
					) }) )
				}	 
				state("okIndoor") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitchGuarded({ `it.unibo`.utils.ParkingSlotsKb.outdoorFree  
					}) )
					transition( edgeName="goto",targetState="readyOnlyIndoor", cond=doswitchGuarded({! ( `it.unibo`.utils.ParkingSlotsKb.outdoorFree  
					) }) )
				}	 
				state("checkOutdoor") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="readyOnlyOutdoor", cond=doswitchGuarded({ `it.unibo`.utils.ParkingSlotsKb.outdoorFree  
					}) )
					transition( edgeName="goto",targetState="notReady", cond=doswitchGuarded({! ( `it.unibo`.utils.ParkingSlotsKb.outdoorFree  
					) }) )
				}	 
				state("ready") { //this:State
					action { //it:State
						println("INDOOR and OUTDOOR Avaiable | SERVICE")
					}
					 transition(edgeName="t03",targetState="acceptin",cond=whenRequest("reqenter"))
					transition(edgeName="t04",targetState="acceptout",cond=whenDispatch("pickup"))
				}	 
				state("readyOnlyIndoor") { //this:State
					action { //it:State
						println("INDOOR Avaiable | SERVICE")
					}
					 transition(edgeName="t05",targetState="acceptin",cond=whenRequest("reqenter"))
				}	 
				state("readyOnlyOutdoor") { //this:State
					action { //it:State
						println("OUTDOOR Avaiable | SERVICE")
					}
					 transition(edgeName="t06",targetState="acceptout",cond=whenDispatch("pickup"))
				}	 
				state("notReady") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_notReady", 
							scope, context!!, "local_tout_parkingmanagerservice_notReady", 2000.toLong() )
					}
					 transition(edgeName="t07",targetState="check",cond=whenTimeout("local_tout_parkingmanagerservice_notReady"))   
				}	 
				state("acceptin") { //this:State
					action { //it:State
						 SLOTNUM = `it.unibo`.utils.ParkingSlotsKb.findSlot()  
						 `it.unibo`.utils.ParkingSlotsKb.setSlot(SLOTNUM, false)  
						updateResourceRep( "SLOTNUM"  
						)
						answer("reqenter", "slotsnum", "slotsnum($SLOTNUM)"   )  
						println("SLOTNUM = $SLOTNUM | SERVICE")
						updateResourceRep( "slotsnum : slotsnum ($SLOTNUM)"  
						)
						println("Trolley is moving to Indoor | SERVICE")
					}
					 transition(edgeName="t08",targetState="carenter",cond=whenRequest("carenter"))
				}	 
				state("carenter") { //this:State
					action { //it:State
						emit("carindoorarrival", "cia(car_arrived)" ) 
						 	INDOORTOKEN = `it.unibo`.utils.ParkingSlotsKb.generateToken(SLOTNUM)  
						answer("carenter", "receipt", "receipt($INDOORTOKEN)"   )  
						updateResourceRep( "receipt : receipt($INDOORTOKEN)"  
						)
						
									GOAL = "indoor"
						forward("move", "move($GOAL)" ,"trolley" ) 
					}
					 transition(edgeName="t09",targetState="moveToSlotIn",cond=whenEvent("finished"))
				}	 
				state("moveToSlotIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("weight(W)"), Term.createTerm("weight(W)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var peso = payloadArg(0)
												println("Weight: " + peso)
						}
						println("Trolley moves from INDOOR to slot $SLOTNUM | SERVICE")
						 
									`it.unibo`.utils.ParkingSlotsKb.indoorFree  = true
									GOAL = "p" + SLOTNUM.toString()
						forward("move", "move($GOAL)" ,"trolley" ) 
					}
					 transition(edgeName="t010",targetState="toHome",cond=whenEvent("finished"))
				}	 
				state("toHome") { //this:State
					action { //it:State
						 
									GOAL = "home"
						forward("move", "move($GOAL)" ,"trolley" ) 
					}
					 transition(edgeName="t011",targetState="check",cond=whenEvent("finished"))
				}	 
				state("acceptout") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup(OUTDOORTOKEN)"), Term.createTerm("pickup(OUTDOORTOKEN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  OUTDOORTOKEN = payloadArg(0).toString()  
						}
						 	CARSLOTNUM = `it.unibo`.utils.ParkingSlotsKb.checkToken(OUTDOORTOKEN)  
					}
					 transition( edgeName="goto",targetState="picking", cond=doswitchGuarded({ CARSLOTNUM > 0  
					}) )
					transition( edgeName="goto",targetState="tokenError", cond=doswitchGuarded({! ( CARSLOTNUM > 0  
					) }) )
				}	 
				state("picking") { //this:State
					action { //it:State
						println("Trolley picking car from slot $CARSLOTNUM | SERVICE")
						delay(3000) 
						 `it.unibo`.utils.ParkingSlotsKb.setSlot(CARSLOTNUM, true) 
									GOAL = "p" + CARSLOTNUM.toString()
						forward("move", "move($GOAL)" ,"trolley" ) 
						emit("caroutdoorarrival", "coa(car_outdoor)" ) 
					}
					 transition(edgeName="t012",targetState="moveToSlotOut",cond=whenEvent("finished"))
				}	 
				state("moveToSlotOut") { //this:State
					action { //it:State
						
									GOAL = "outdoor"
						forward("move", "move($GOAL)" ,"trolley" ) 
						println("Car is in Outdoor area | SERVICE")
					}
					 transition(edgeName="t013",targetState="check",cond=whenEvent("finished"))
				}	 
				state("tokenError") { //this:State
					action { //it:State
						println("Invalid insert Token!")
					}
					 transition( edgeName="goto",targetState="ready", cond=doswitch() )
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("%%%% TIMEOUT %%%%")
						emit("alarm", "timeout(alarm)" ) 
					}
				}	 
			}
		}
}
