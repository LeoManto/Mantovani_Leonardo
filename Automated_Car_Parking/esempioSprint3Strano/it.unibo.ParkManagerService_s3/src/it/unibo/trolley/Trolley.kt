/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			//var CurPath	= ""
		  	//var CurSlot   = ""
		  	//var StartTime     = 0L     
		  	//var Duration      = 0L  
		  	//var CurrentMove   = "moveUnknown"
		  	
			var StepTime      = 0L
			var RobotType     = "" 
			var GOAL = ""
			val mapname     = "parkingMap" 		 
			var Myself      = myself  
			var CurrentPlannedMove = ""
		  
		  	val util = `it.unibo`.utils.TrolleyUtilityKb
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("basicrobot | START")
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = unibo.robot.robotSupport.robotKind  
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( "$mapname"  )
						unibo.robot.robotSupport.move( "h"  )
						delay(1000) 
						unibo.robot.robotSupport.move( "l"  )
						unibo.robot.robotSupport.move( "r"  )
						discardMessages = false
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						pathexecutil.register( Myself  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("Waiting | TROLLEY ")
					}
					 transition(edgeName="t014",targetState="path",cond=whenDispatch("move"))
				}	 
				state("path") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("move(V)"), Term.createTerm("move(GOAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 GOAL = payloadArg(0).toString()  
								println("TROLLEY is going to $GOAL | TROLLEY")
								util.getPathPlan( GOAL  )
						}
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						delay(300) 
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()  
						println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove | TROLLEY")
					}
					 transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({ CurrentPlannedMove.length>0  
					}) )
					transition( edgeName="goto",targetState="halt", cond=doswitchGuarded({! ( CurrentPlannedMove.length>0  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
						StepTime =  
						unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						stateTimer = TimerActor("timer_doMove", 
							scope, context!!, "local_tout_trolley_doMove", StepTime )
					}
					 transition(edgeName="t015",targetState="stepDone",cond=whenTimeout("local_tout_trolley_doMove"))   
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if (CurrentPlannedMove == "w") { 
						unibo.robot.robotSupport.move( "h"  )
						} 
						itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove"  )
						stateTimer = TimerActor("timer_stepDone", 
							scope, context!!, "local_tout_trolley_stepDone", 300.toLong() )
					}
					 transition(edgeName="t016",targetState="execPlannedMoves",cond=whenTimeout("local_tout_trolley_stepDone"))   
				}	 
				state("halt") { //this:State
					action { //it:State
						
						 			if(util.isObstacle(GOAL)){	
						util.removeObstacle( GOAL  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						
						 			}else{
						util.setObstacle( GOAL  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						
						 			}
						println("path finished | TROLLEY")
						emit("finished", "finished(V)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
