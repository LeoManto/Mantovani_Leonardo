System trolleyservice

mqttBroker "broker.hivemq.com" : 1883 eventTopic "parkingArea/feedback"

Dispatch move  : move(GOAL)
Event finished : finished(V)
Event obstacle : obstacle( T )


Dispatch stopTrolley   : stop(V)
Dispatch resumeTrolley : resume(V)

Context ctxTrolley  ip [host="127.0.0.1" port=5685]

QActor trolley context ctxTrolley{         
[#
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "moveUnknown"
 
  var GOAL = "" 
  var STATUS = ""
 
  val mapname     = "parkingMap" 		 
  var Myself      = myself  
  var CurrentPlannedMove = ""
  var CurPath	= ""
  var CurSlot   = ""
  val planner = `it.unibo`.utils.TrolleySupport
#]  
 	State s0 initial { 	      
 		println("basicrobot | START")	
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
 		
 		run itunibo.planner.plannerUtil.loadRoomMap("$mapname")
 		run itunibo.planner.plannerUtil.initAI()

		
		
		run itunibo.planner.plannerUtil.showCurrentRobotState()  	
     	//run pathexecutil.register( Myself )
 
 		run unibo.robot.robotSupport.move( "h" )
 		delay 1000 
   		run unibo.robot.robotSupport.move( "l" )
		run unibo.robot.robotSupport.move( "r" )
 		discardMsg Off  //WE want receive any msg
 		
     	run itunibo.planner.plannerUtil.showMap()
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	
     	run pathexecutil.register( Myself ) 
     	
		[# val posX = itunibo.planner.plannerUtil.getPosX() #]
		[# val posY = itunibo.planner.plannerUtil.getPosY() #]
		[# val dir =  itunibo.planner.plannerUtil.getDirection() #]
     	updateResource [# "{\"robotPos\":\"($posX, $posY)\"}" #]
     	updateResource [# "{\"direction\":\"$dir\"}" #]
 	}
	Goto work
	
	
	State work{
		[# unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.IDLE #]
		[# STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString() #]
		//updateResource [# "status($STATUS)" #]
		updateResource [# "{\"status\":\"$STATUS\"}" #]
		println("basicrobot waiting ... | TROLLEY")  
	}Transition t0
		whenMsg move -> path
		whenMsg stopTrolley -> stopped	  
		
		
	State stopped{
		run unibo.robot.robotSupport.move( "h" )
		[# unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.STOPPED #]
		[# val STATUS =  unibo.robot.TrolleyKb.trolleyStatus #]
		updateResource [# "{\"status\":\"$STATUS\"}" #]
	} Transition t0
			whenMsg resumeTrolley -> resume
	
	
	State path{
		onMsg(move : move(GOAL)){
			[# GOAL = payloadArg(0) #]
			updateResource [# "{\"curDest\":\"$GOAL\"}" #]
			println("GOAL = $GOAL | TROLLEY")
			run planner.getPathPlan(GOAL)
			[# CurPath = itunibo.planner.plannerUtil.getActions().toString() #]
		}
		[# unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.WORKING #]
		[# STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString() #]
		//updateResource [# "status($STATUS)" #]
		updateResource [# "{\"status\":\"$STATUS\"}" #]
	} Goto execPlannedMoves if [# GOAL != "home" #]
		else checkInterrupt
		
		
 	State checkInterrupt{
 	}Transition t0 
 			whenTime 100   -> execPlannedMoves
 			whenMsg move   -> path
 			whenMsg stopTrolley   -> stopped
    
   
	State execPlannedMoves{   
		//delay 300
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove | TROLLEY")
 	}
 	Goto doMove if [# CurrentPlannedMove.length>0 #] else endPath //parkthecar
 
 
 	State doMove{ 	
 		[# StepTime = #] run unibo.robot.robotSupport.move( "$CurrentPlannedMove" )
 		//[# StepTime = StepTime+100 #]
 	}Transition t0 
 			whenTimeVar StepTime   -> checkObstacle 
 	
 	
 	State checkObstacle{
 	}Transition t0
 		whenTime 100 -> stepDone
 		whenEvent obstacle -> handleObstacle
 	
 	
 	 State stepDone{
 	 	printCurrentMessage
 	 	[#if (CurrentPlannedMove == "w" || CurrentPlannedMove == "s") {#]
 	 		run unibo.robot.robotSupport.move( "h" )
 	 	[#}#]
 		//updateResource [# "stepdone($CurrentPlannedMove)" #]
 		run itunibo.planner.plannerUtil.updateMap(  "$CurrentPlannedMove" )
 		
		[# val posX = itunibo.planner.plannerUtil.getPosX() #]
		[# val posY = itunibo.planner.plannerUtil.getPosY() #]
		[# val dir =  itunibo.planner.plannerUtil.getDirection() #]
     	updateResource [# "{\"robotPos\":\"($posX, $posY)\"}" #]
     	updateResource [# "{\"direction\":\"$dir\"}" #]
 		//updateResource [# "stepDone" # ]
  	} Transition t0
  				whenTime 100 -> checkHomeGoal 
  				whenMsg stopTrolley -> stopped
  				
  	
  	State checkHomeGoal{
  	}Goto execPlannedMoves if[# GOAL != "home" #]
		else checkInterrupt
 	
 	 
 	State endPath{
		[# var timeDelay = #] run planner.exactDir(GOAL)
		[# delay(timeDelay) #] 
 		println("path finished | TROLLEY")
 		run itunibo.planner.plannerUtil.showCurrentRobotState()
 		//updateResource [# "finished($GOAL)" #]
 		//updateResource [# "{\"finished\":\"$GOAL\"}" #]
 		emit finished : finished($GOAL) 
 		println("finished($GOAL) | TROLLEY")
 		[# GOAL = "" #]
 	} Goto work
 	
 	
 	State handleObstacle{   
	    run unibo.robot.robotSupport.move( "h" )
		println("basicrobot | handleObstacleeeeeeeeeeeeeeeeeeee CurrentMove=$CurrentMove")	
		printCurrentMessage
	} Goto stepDone if[# !planner.checkObstacle(itunibo.planner.plannerUtil.getPosX(), itunibo.planner.plannerUtil.getPosY()) #]
		else restart


	State resume{
	}Goto restart if [# GOAL != "" #]
		else work


	State restart{
			run planner.getPathPlan(GOAL)
			[# unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.WORKING #]
			[# STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString() #]
			//updateResource [# "status($STATUS)" #]
			updateResource [# "{\"status\":\"$STATUS\"}" #]
	} Goto execPlannedMoves if [# GOAL != "home" #]
		else checkInterrupt
		
		 
}	
