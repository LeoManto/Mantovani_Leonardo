/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		  var StepTime      = 0L
		  var StartTime     = 0L     
		  var Duration      = 0L  
		  var RobotType     = "" 
		  var CurrentMove   = "moveUnknown"
		 
		  var GOAL = "" 
		  var STATUS = ""
		 
		  val mapname     = "parkingMap" 		 
		  var Myself      = myself  
		  var CurrentPlannedMove = ""
		  var CurPath	= ""
		  var CurSlot   = ""
		  val planner = `it.unibo`.utils.TrolleySupport
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("basicrobot | START")
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = unibo.robot.robotSupport.robotKind  
						itunibo.planner.plannerUtil.loadRoomMap( "$mapname"  )
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						unibo.robot.robotSupport.move( "h"  )
						delay(1000) 
						unibo.robot.robotSupport.move( "l"  )
						unibo.robot.robotSupport.move( "r"  )
						discardMessages = false
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						pathexecutil.register( Myself  )
						 val posX = itunibo.planner.plannerUtil.getPosX()  
						 val posY = itunibo.planner.plannerUtil.getPosY()  
						 val dir =  itunibo.planner.plannerUtil.getDirection()  
						updateResourceRep( "{\"robotPos\":\"($posX, $posY)\"}"  
						)
						updateResourceRep( "{\"direction\":\"$dir\"}"  
						)
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						 unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.IDLE  
						 STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString()  
						updateResourceRep( "{\"status\":\"$STATUS\"}"  
						)
						println("basicrobot waiting ... | TROLLEY")
					}
					 transition(edgeName="t00",targetState="path",cond=whenDispatch("move"))
					transition(edgeName="t01",targetState="stopped",cond=whenDispatch("stopTrolley"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						unibo.robot.robotSupport.move( "h"  )
						 unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.STOPPED  
						 val STATUS =  unibo.robot.TrolleyKb.trolleyStatus  
						updateResourceRep( "{\"status\":\"$STATUS\"}"  
						)
					}
					 transition(edgeName="t02",targetState="resume",cond=whenDispatch("resumeTrolley"))
				}	 
				state("path") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("move(GOAL)"), Term.createTerm("move(GOAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 GOAL = payloadArg(0)  
								updateResourceRep( "{\"curDest\":\"$GOAL\"}"  
								)
								println("GOAL = $GOAL | TROLLEY")
								planner.getPathPlan( GOAL  )
								 CurPath = itunibo.planner.plannerUtil.getActions().toString()  
						}
						 unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.WORKING  
						 STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString()  
						updateResourceRep( "{\"status\":\"$STATUS\"}"  
						)
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ GOAL != "home"  
					}) )
					transition( edgeName="goto",targetState="checkInterrupt", cond=doswitchGuarded({! ( GOAL != "home"  
					) }) )
				}	 
				state("checkInterrupt") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_checkInterrupt", 
							scope, context!!, "local_tout_trolley_checkInterrupt", 100.toLong() )
					}
					 transition(edgeName="t03",targetState="execPlannedMoves",cond=whenTimeout("local_tout_trolley_checkInterrupt"))   
					transition(edgeName="t04",targetState="path",cond=whenDispatch("move"))
					transition(edgeName="t05",targetState="stopped",cond=whenDispatch("stopTrolley"))
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()  
						println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove | TROLLEY")
					}
					 transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({ CurrentPlannedMove.length>0  
					}) )
					transition( edgeName="goto",targetState="endPath", cond=doswitchGuarded({! ( CurrentPlannedMove.length>0  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
						 StepTime =  
						unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						stateTimer = TimerActor("timer_doMove", 
							scope, context!!, "local_tout_trolley_doMove", StepTime )
					}
					 transition(edgeName="t06",targetState="checkObstacle",cond=whenTimeout("local_tout_trolley_doMove"))   
				}	 
				state("checkObstacle") { //this:State
					action { //it:State
						stateTimer = TimerActor("timer_checkObstacle", 
							scope, context!!, "local_tout_trolley_checkObstacle", 100.toLong() )
					}
					 transition(edgeName="t07",targetState="stepDone",cond=whenTimeout("local_tout_trolley_checkObstacle"))   
					transition(edgeName="t08",targetState="handleObstacle",cond=whenEvent("obstacle"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if (CurrentPlannedMove == "w" || CurrentPlannedMove == "s") { 
						unibo.robot.robotSupport.move( "h"  )
						} 
						itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove"  )
						 val posX = itunibo.planner.plannerUtil.getPosX()  
						 val posY = itunibo.planner.plannerUtil.getPosY()  
						 val dir =  itunibo.planner.plannerUtil.getDirection()  
						updateResourceRep( "{\"robotPos\":\"($posX, $posY)\"}"  
						)
						updateResourceRep( "{\"direction\":\"$dir\"}"  
						)
						stateTimer = TimerActor("timer_stepDone", 
							scope, context!!, "local_tout_trolley_stepDone", 100.toLong() )
					}
					 transition(edgeName="t09",targetState="checkHomeGoal",cond=whenTimeout("local_tout_trolley_stepDone"))   
					transition(edgeName="t010",targetState="stopped",cond=whenDispatch("stopTrolley"))
				}	 
				state("checkHomeGoal") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ GOAL != "home"  
					}) )
					transition( edgeName="goto",targetState="checkInterrupt", cond=doswitchGuarded({! ( GOAL != "home"  
					) }) )
				}	 
				state("endPath") { //this:State
					action { //it:State
						 var timeDelay =  
						planner.exactDir( GOAL  )
						 delay(timeDelay)  
						println("path finished | TROLLEY")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						emit("finished", "finished($GOAL)" ) 
						println("finished($GOAL) | TROLLEY")
						 GOAL = ""  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						unibo.robot.robotSupport.move( "h"  )
						println("basicrobot | handleObstacleeeeeeeeeeeeeeeeeeee CurrentMove=$CurrentMove")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="stepDone", cond=doswitchGuarded({ !planner.checkObstacle(itunibo.planner.plannerUtil.getPosX(), itunibo.planner.plannerUtil.getPosY())  
					}) )
					transition( edgeName="goto",targetState="restart", cond=doswitchGuarded({! ( !planner.checkObstacle(itunibo.planner.plannerUtil.getPosX(), itunibo.planner.plannerUtil.getPosY())  
					) }) )
				}	 
				state("resume") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="restart", cond=doswitchGuarded({ GOAL != ""  
					}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! ( GOAL != ""  
					) }) )
				}	 
				state("restart") { //this:State
					action { //it:State
						planner.getPathPlan( GOAL  )
						 unibo.robot.TrolleyKb.trolleyStatus = `it.unibo`.utils.TrolleyStatus.WORKING  
						 STATUS = unibo.robot.TrolleyKb.trolleyStatus.toString()  
						updateResourceRep( "{\"status\":\"$STATUS\"}"  
						)
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ GOAL != "home"  
					}) )
					transition( edgeName="goto",targetState="checkInterrupt", cond=doswitchGuarded({! ( GOAL != "home"  
					) }) )
				}	 
			}
		}
}
