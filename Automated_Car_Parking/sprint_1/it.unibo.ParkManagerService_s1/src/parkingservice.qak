System   parkingservice
 
Request reqenter : reqenter(V)
Reply slotsnum : slotsnum(SLOTNUM)

Request carenter : carenter(V)
Reply receipt  : receipt(TOKENID)

Dispatch pickup : pickup(tokenID)

Event timeout 			: timeout(V)
Event sensor 			: sensor(areaFree)
Event carindoorarrival : cia(V)
Event caroutdoorarrival : coa(V)
Event carwithdrawn		: cw(V)
Event weightsensor		: weight(W)
Event alarm 			: timeout(alarm)


Context ctxParkingservice  ip [host="localhost" port=8052]
      

CodedQActor outsonar context ctxParkingservice className "sonarSimulator"
CodedQActor weightsensor context ctxParkingservice className "weightsensorSimulator"


/* 
 * ------------------------------------------------------------------
 *   
 * ------------------------------------------------------------------
*/  

 
QActor client context ctxParkingservice{
	[# 
		var SLOTNUM = 0
		var TOKENID = 0 // sarà direttamente il num dello slot assegnato //
	#]
	State s0 initial{
		println("Client mock simulation START | CLIENT")
	} Goto requestToEnter
	 
	State requestToEnter{
		delay 4000
		println("client notify his interest in entering | CLIENT")
		request parkingmanagerservice -m reqenter : reqenter(client)
	} Transition t0 
					//whenTime 2000 -> noentry //se non si gestisce entro 2 sec, il cliente non entra
					whenReply slotsnum -> cartoindoor
	
	State noentry{
		// non entra
	}
	
	State cartoindoor{
		
		onMsg(slotsnum : slotsnum (SLOTNUM)){
			[# SLOTNUM = payloadArg(0).toInt() #]	
			if [# SLOTNUM > 0 #]{
				println("SLOTNUM = $SLOTNUM | CLIENT" )
				request parkingmanagerservice -m carenter : carenter(V) 
			}
		}
	}
	Transition t0 
					whenReply receipt -> afterreceipt

	State afterreceipt{
		onMsg(receipt : receipt (TOKENID)){
			[# TOKENID = payloadArg(0).toInt() #]
			updateResource [# "TOKENID" #]
			println("client's TOKENID is $TOKENID | CLIENT")
		}
	} 
	Transition t0
					whenTime 10000 -> reqpickup  //10 secs prima di chiedere il pickup

	State reqpickup{
		/*==========[acceptOUT]==========*/
		println("client notify his interest in picking his car | CLIENT")
		forward parkingmanagerservice -m pickup : pickup($TOKENID)
	} Transition t0 
					whenEvent caroutdoorarrival -> pickupcar
	
	State pickupcar{
		delay 2000 //in 2 secondi porta via l'auto da OUTDOOR
		emit carwithdrawn : cw(bye)
	}
	
}


QActor parkingmanagerservice context ctxParkingservice{
	[#
	lateinit var weightSensorActor : ActorBasic
	lateinit var outSonarActor : ActorBasic
	
	var indoorFree 	  = true
	var outdoorFree	  = true
	var trolleyStatus = true
	var SLOTNUM 	  = 0
	#]
	
	State s0 initial{
		[#
		outSonarActor     = sysUtil.getActor("outsonar")!!
		weightSensorActor = sysUtil.getActor("weightsensor")!!
		#]
	println("Park System START | SERVICE")	
	}
	Goto ready
	
	State ready{
		println("waiting for client | SERVICE")
	}
	Transition t0 	whenMsg pickup   -> handleToken
					whenRequest reqenter -> acceptin //non c'è controllo sui posti liberi per assunzione
	
	State acceptin{
		/*==========[acceptIN]==========*/
		[# SLOTNUM = kotlin.random.Random.nextInt(1,6) #] //sostituisce per ora il check sui posti liberi
		updateResource [# "SLOTNUM" #]
		/*==========[informIN]==========*/
		replyTo reqenter with slotsnum : slotsnum ($SLOTNUM)
		updateResource [# "slotsnum : slotsnum ($SLOTNUM)" #]
		/*==========[moveToIn]==========*/
		println("Trolley is moving to Indoor | SERVICE")
	} Transition t0
					whenRequest carenter -> carenter
					
	State carenter{
		[# indoorFree = false #]	
		emit carindoorarrival : cia(car_arrived)  //questo lo deve catturare il weightsensor		
	} Transition t0
				whenEvent weightsensor -> moveToSlotIn			
				
	State moveToSlotIn{
		onMsg(weightsensor : weight(W)){
			[# 
				var peso = payloadArg(0)
				println("Weight: " + peso)
			#]
			}
		/*==========[moveToSlotIn]==========*/
		println("Trolley moves from entrance to slot $SLOTNUM | SERVICE")
		[# indoorFree = true #]
	} Transition t0
			whenTime 4000 -> receipt //simuliamo lo spostamento del Trolley
					
					
	State receipt{ 
		[# var TOKENID = SLOTNUM #]	//si elabora un token-id (in questo caso è lo SLOTNUM usato prima)
		/*==========[receipt]==========*/
		replyTo carenter with receipt : receipt($TOKENID)
		updateResource [# "receipt : receipt($TOKENID)" #]
		emit carindoorarrival : cia(car_arrived)  //questo lo deve catturare il weightsensor
		/*==========[moveToHome]==========*/
		println("Trolley moves to Home | SERVICE")
	} Transition t0 
					whenTime 1000 -> ready  //simuliamo il ritorno ad Home del Trolley
	
	
	State handleToken{
		onMsg (pickup : pickup(tokenID)){
			/*==========[findSlot]==========*/
				[# var tokenIN = payloadArg(0) #]} //tokenIN è il token fornito dal client
		//elaborazioni sul tokenIN per ottenere lo slotnum corrispondente(non in questo modello)
		
		println("checking Trolley status | SERVICE")
	}  
	Transition t0
				whenTime 500 -> picking  //simuliamo l'elaborazione del tokenIN
	
	 
	State picking{	 	
		println("Trolley picking car | SERVICE")
		/*==========[moveToSlotOut]==========*/
		/*==========[moveToOut]==========*/
		delay 4000
		println("Car is in Outdoor area | SERVICE")
		/*==========[moveToHome]==========*/
		println("Trolley moves to Home | SERVICE")
		emit caroutdoorarrival : coa(car_outdoor)  //deve essere percepito dal sensore
		[# outdoorFree = false #]
	}
	Transition t0 	whenEvent carwithdrawn  -> withdrawn
					whenEvent timeout -> timeout
 
	
	State withdrawn{
		[# outdoorFree = true #]
		println("Car withdrawn!")
	} 
	Goto ready
	
	State timeout{
		println("%%%% TIMEOUT %%%%" )
		emit alarm : timeout(alarm)		
	}
		
}



