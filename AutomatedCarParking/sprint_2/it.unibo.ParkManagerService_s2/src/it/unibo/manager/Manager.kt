/* Generated by AN DISI Unibo */ 
package it.unibo.manager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Manager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var working = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("ManagerMockSimulation START | MANAGER")
					}
					 transition( edgeName="goto",targetState="waitTemp", cond=doswitch() )
				}	 
				state("waitTemp") { //this:State
					action { //it:State
						
									if(working == true){
										println("Attendo l'evento del termometro | GENERATORE")
									}else{
										working = true
						forward("stopfan", "stopfan(V)" ,"fan" ) 
						println("Invio messaggio restart")
						forward("restart", "restart(V)" ,"thermometer" ) 
						
									}
									
					}
					 transition(edgeName="t011",targetState="fanActivation",cond=whenEvent("hottemp"))
				}	 
				state("fanActivation") { //this:State
					action { //it:State
						println("Ho ricevuto l'allarme, attivo la ventola...")
						forward("startfan", "fan(V)" ,"fan" ) 
						
									working = false
					}
					 transition(edgeName="t012",targetState="waitTemp",cond=whenEvent("normtemp"))
				}	 
			}
		}
}
