System   parkingservice
 
Request reqenter : reqenter(V)
Reply slotsnum : slotsnum(SLOTNUM)

Request carenter : carenter(V)
Reply receipt  : receipt(TOKENID)

Dispatch pickup : pickup(tokenID)

//------------------------------------------------------------------------------------------------
Dispatch startthermometer : thermometer(V)
Dispatch restart : restart(V)
Dispatch startfan : fan(V)
Dispatch stopfan : stopfan(V)
//------------------------------------------------------------------------------------------------

Event timeout 			: timeout(V)
Event sensor 			: sensor(areaFree)
Event carindoorarrival  : cia(V)
Event caroutdoorarrival : coa(V)
Event carwithdrawn		: cw(V)
Event weightsensor		: weight(W)
Event alarm 			: timeout(alarm)

//------------------------------------------------------------------------------------------------
Event hottemp			: hot(V)
Event normtemp			: norm(V)
//------------------------------------------------------------------------------------------------


Context ctxParkingservice  ip [host="localhost" port=8052]
      

CodedQActor outsonar context ctxParkingservice className "sonarSimulator"
CodedQActor weightsensor context ctxParkingservice className "weightsensorSimulator"

//------------------------------------------------------------------------------------------------
CodedQActor thermometer context ctxParkingservice className "thermometerSimulator"
CodedQActor fan context ctxParkingservice className "fanSimulator"
//------------------------------------------------------------------------------------------------

/* 
 * ------------------------------------------------------------------
 *   TODO: MANCANO I CONTROLLI SULLA OUTDOOR
 * 
 * Assumptions :
 *
 * • no GUIs, but simulated clients (by QActor or Jupyter Notebook)
 * • no handling of Timeout alarm 
 * • state of Trolley is not consider
 * • No real Trolley movements
 * • No start/stop by Human Manager
 * • A first handling of TokenId (security)
 * ------------------------------------------------------------------
*/  


QActor client context ctxParkingservice{
	[# 
		var CLIENTDONE  = 0
		var SLOTNUM 	= 0 // num degli slot liberi 
		var TOKENID 	= "0" // sarà direttamente il num dello slot assegnato 
	#]
	State s0 initial{
		println("Client mock simulation START | CLIENT")
	} Goto requestToEnter
	 
	State requestToEnter{
		[# var t = kotlin.random.Random.nextLong(1000,4000) #]
		[# delay(t) #]
		println("client notify his interest in entering | CLIENT")
		request parkingmanagerservice -m reqenter : reqenter(client)
	} Transition t0 
					//whenTime 2000 -> noentry //se non si gestisce entro 2 sec, il cliente non entra
					whenReply slotsnum -> cartoindoor
	
	State noentry{
		// non entra
	}
	
	State cartoindoor{
		
		onMsg(slotsnum : slotsnum (SLOTNUM)){
			[# SLOTNUM = payloadArg(0).toInt() #]	
			if [# SLOTNUM > 0 #]{
				println("There are $SLOTNUM free slots. Moving car to Indoor | CLIENT") 
				request parkingmanagerservice -m carenter : carenter(V) 
			}
		}
		
	}
	Transition t0 
					whenReply receipt -> afterreceipt

	State afterreceipt{
		onMsg(receipt : receipt (TOKENID)){
			[# TOKENID = payloadArg(0) #]
			updateResource [# "TOKENID" #]
			println("client's TOKENID is $TOKENID | CLIENT")
			[# var t1 = kotlin.random.Random.nextLong(3000, 6000)
			 delay(t1) #]
		}
	} 
	Transition t0
					whenTime 6000 -> reqpickup  //10 secs prima di chiedere il pickup

	State reqpickup{
		println("client notify his interest in picking his car | CLIENT")
		forward parkingmanagerservice -m pickup : pickup($TOKENID)
	} Transition t0 
					whenEvent caroutdoorarrival -> pickupcar
	
	State pickupcar{
		delay 2000 //in 2 secondi porta via l'auto da OUTDOOR
		emit carwithdrawn : cw(bye)
		[# CLIENTDONE = CLIENTDONE + 1 #]
	}Goto stop if [# CLIENTDONE == 5 #] else requestToEnter 
	
	State stop{
		println("No more clients")
	}
}


QActor parkingmanagerservice context ctxParkingservice{
	[#
	lateinit var weightSensorActor : ActorBasic
	lateinit var outSonarActor : ActorBasic
	
	var SLOTNUM = 1
	var INDOORTOKEN  = "1" //tokenid dato al client
	
	var OUTDOORTOKEN = "1" //tokenid ricevuto dal client
	var EXITSLOT =  1
	
	#]
	
	State s0 initial{
		[#
		outSonarActor     = sysUtil.getActor("outsonar")!!
		weightSensorActor = sysUtil.getActor("weightsensor")!!
		thermometerActor = sysUtil.getActor("thermometer")!!
		fanActor = sysUtil.getActor("fan")!!
		#]
	println("Park System START | SERVICE")	
	forward thermometer -m startthermometer : thermometer(V)
	}
	Goto ready
	
	State ready{
		println("waiting for client | SERVICE")
	}
	Transition t0 	whenMsg pickup   -> handleOutdoorToken
					whenRequest reqenter -> acceptin //non c'è controllo sui posti liberi per assunzione
	
	State acceptin{
		if [# 	`it.unibo`.ParkManagerService_s2.ParkingSlotsKb.indoorFree &&
				`it.unibo`.ParkManagerService_s2.ParkingSlotsKb.checkSlots() > 0
			#]{
			[# SLOTNUM = `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.findSlot() #]
			updateResource [# "SLOTNUM" #]
			println("SLOTNUM = $SLOTNUM | SERVICE" )
			replyTo reqenter with slotsnum : slotsnum ($SLOTNUM) // informIN
			updateResource [# "slotsnum : slotsnum ($SLOTNUM)" #]
			println("Trolley is moving to Indoor | SERVICE")     // moveToIn
		}
		// si auto-invia la "reqenter" così da rimettersi in coda
		else {
			onMsg( reqenter : reqenter(V) ){
				[# var W = payloadArg(0) #]
				request parkingmanagerservice -m reqenter:reqenter($W)
			}
		} 
	} Transition t0
					whenRequest carenter -> carenter
					
	State carenter{
		[# `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.indoorFree = false #]	
		emit carindoorarrival : cia(car_arrived)  //questo lo deve catturare il weightsensor		
	} Transition t0
				whenEvent weightsensor -> moveToSlotIn
			
	State moveToSlotIn{
		onMsg(weightsensor : weight(W)){
			[# 
				var peso = payloadArg(0)
				println("Weight: " + peso)
			#]
			}
		println("Trolley moves from INDOOR to slot $SLOTNUM | SERVICE")
		[# `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.indoorFree  = true #] 
		[# `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.setSlot(SLOTNUM, false) #]

	} Transition t0
			whenTime 4000 -> receipt //simuliamo lo spostamento del Trolley fino allo slot
					
	State receipt{  
		[# 	INDOORTOKEN = `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.generateToken(SLOTNUM) #]
		replyTo carenter with receipt : receipt($INDOORTOKEN)
		updateResource [# "receipt : receipt($INDOORTOKEN)" #]
		println("TOKENID: $INDOORTOKEN") //to delete
	} Goto ready
	
	
	State handleOutdoorToken{
		onMsg (pickup : pickup(tokenID)){
				[#  OUTDOORTOKEN = payloadArg(0).toString()
				#]}
		[# EXITSLOT = `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.checkToken(OUTDOORTOKEN) #]
		println("checking Trolley status | SERVICE")
	}  
	Goto picking if [# EXITSLOT > 0 #] else tokenError
	
	State tokenError{
		println("Invalid insert Token!")
	} Goto ready
	 
	State picking{	 	
		println("Trolley picking car from slot $EXITSLOT | SERVICE")
		delay 4000
		[# `it.unibo`.ParkManagerService_s2.ParkingSlotsKb.setSlot(EXITSLOT, true) #]
		println("Car is in Outdoor area | SERVICE")
		emit caroutdoorarrival : coa(car_outdoor)  //deve essere percepito dal sensore
	}
	Transition t0 	whenEvent carwithdrawn  -> withdrawn
					whenEvent timeout -> timeout
 
	
	State withdrawn{
		println("Car withdrawn!")
	} 
	Goto ready
	
	State timeout{
		println("%%%% TIMEOUT %%%%" )
		emit alarm : timeout(alarm)		
	}
		
}

QActor manager context ctxParkingservice{
	[# 
		var working = true
	#]
	State s0 initial{
		println("ManagerMockSimulation START | MANAGER")
	} Goto waitTemp
	 
	State waitTemp{
		[#
			if(working == true){
				println("Attendo l'evento del termometro | GENERATORE")
			}else{
				working = true
		#]
				forward fan -m stopfan : stopfan(V)
				println("Invio messaggio restart")
				forward thermometer -m restart : restart(V)
		[#
			}
			
		#]
		
	} Transition t0 
					whenEvent hottemp -> fanActivation
					
	State fanActivation{
		println("Ho ricevuto l'allarme, attivo la ventola...")
		forward fan -m startfan : fan(V)
		[#
			working = false
		#]
	}Transition t0
		whenEvent normtemp -> waitTemp
		
	
	
}


