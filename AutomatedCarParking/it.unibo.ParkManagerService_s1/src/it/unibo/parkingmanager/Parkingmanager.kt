/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			lateinit var thermometerActor : ActorBasic
			var T = "0" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 thermometerActor = sysUtil.getActor("thermometer")!!  
						forward("startThermometer", "startThermometer(ok)" ,"thermometer" ) 
					}
					 transition(edgeName="t04",targetState="handleTemperature",cond=whenEvent("thermometer"))
				}	 
				state("handleTemperature") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temperature(temp)"), Term.createTerm("termperature(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 T = payloadArg(0)  
						}
						updateResourceRep( "$T"  
						)
						println("temperature=$T")
					}
					 transition(edgeName="t05",targetState="handleTemperature",cond=whenEvent("thermometer"))
				}	 
			}
		}
}
