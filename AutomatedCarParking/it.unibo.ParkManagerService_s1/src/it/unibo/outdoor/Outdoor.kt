/* Generated by AN DISI Unibo */ 
package it.unibo.outdoor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outdoor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			
			lateinit var timerActor : ActorBasic
			lateinit var outSonar : ActorBasic
			// lateinit var tokenReader : ActorBasic
			var areaFree = true
			var trolleyStatus = true
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						
								timerActor 		= sysUtil.getActor("outdoortimer")!!
								outSonar        = sysUtil.getActor("outsonar")!!
								// tokenHandler = sysUtil.getActor("tokenhandler")!!
					}
					 transition( edgeName="goto",targetState="avaiable", cond=doswitch() )
				}	 
				state("avaiable") { //this:State
					action { //it:State
						 areaFree = true  
						println("ok | OUTDOOR ")
					}
					 transition(edgeName="t00",targetState="handleToken",cond=whenDispatch("pickup"))
					transition(edgeName="t01",targetState="handleToken",cond=whenEvent("pickup"))
				}	 
				state("handleToken") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup(tokenID)"), Term.createTerm("pickup(tokenID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var token = payloadArg(0)  
						}
						delay(500) 
						println("checking Trolley status | OUTDOOR")
					}
					 transition( edgeName="goto",targetState="picking", cond=doswitch() )
				}	 
				state("picking") { //this:State
					action { //it:State
						 trolleyStatus = false  
						println("Trolley picking car | OUTDOOR")
						delay(4000) 
						println("Car is in Outdoor area")
						 areaFree = false  
						forward("timerstart", "timerstart(ok)" ,"outdoortimer" ) 
						forward("startSonar", "startSonar(on)" ,"outsonar" ) 
					}
					 transition(edgeName="t02",targetState="withdrawn",cond=whenEvent("sensor"))
					transition(edgeName="t03",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("withdrawn") { //this:State
					action { //it:State
						println("Car withdrawn!")
						forward("timerstop", "timerstop(off)" ,"outdoortimer" ) 
					}
					 transition( edgeName="goto",targetState="avaiable", cond=doswitch() )
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("%%%% TIMEOUT %%%%")
						forward("stopSonar", "stopSonar(off)" ,"outsonar" ) 
						emit("timeout", "timeout(alarm)" ) 
					}
				}	 
			}
		}
}
