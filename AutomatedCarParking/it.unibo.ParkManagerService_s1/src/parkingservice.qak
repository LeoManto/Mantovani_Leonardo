/*
 * demoplannertf21.qak
 
 ASSUMPTION: the virtualrobot is running
  
 In this model, we use the actors defined in 2020 (project it.unibo.qakactor)

 However, the support to interact with the robot (pathexecutil) 
 uses the actors defined in 2021
 (e.g. it.unibo.robotService.BasicStepRobotActor from project it.unibo.kotlinSupports)
 
 We use also the plannerUtil included in project it.unibo.kotlinSupport. 
  */   
  
System   parkingservice

Dispatch moveok : move( MOVESHORT )
Dispatch pickup : pickup(tokenID)
Dispatch timerstart  : timerstart(V)
Dispatch startSonar : startSonar(V)
Dispatch stopSonar : stopSonar(V)
Dispatch timerstop : timerstop(V)
Dispatch simulationStart : simulationStart(V)
Dispatch startThermometer : startThermometer(V)


Event timeout 		: timeout(V)
Event trolleyHome 	: trolleyHome(V)
Event sensor 		: sensor(areaFree)
Event pickup 		: pickup(tokenID)
Event thermometer	: temperature(temp) //emitted from thermometerSimulator
Event temperature	: temperature(temp) //temperature for the application level

Context ctxParkingservice  ip [host="localhost" port=8052]
      

CodedQActor outdoortimer context ctxParkingservice className "timerOutdoor"
CodedQActor pickupsimulator context ctxParkingservice className "pickupSimulator"
//CodedQActor tokenreader context ctxParkingservice className "tokenReader"
CodedQActor outsonar context ctxParkingservice className "sonarSimulator"
CodedQActor thermometer context ctxParkingservice className "thermometerSimulator"


/* 
 * ------------------------------------------------------------------
 *   
 * ------------------------------------------------------------------
*/  


QActor outdoor context ctxParkingservice{
	[#
	
	lateinit var timerActor : ActorBasic
	lateinit var outSonar : ActorBasic
	// lateinit var tokenReader : ActorBasic
	var areaFree = true
	var trolleyStatus = true
	
	#]
	
	State s0 initial{
		[#
		timerActor 		= sysUtil.getActor("outdoortimer")!!
		outSonar        = sysUtil.getActor("outsonar")!!
		// tokenHandler = sysUtil.getActor("tokenhandler")!!
		#]
		
	}
	Goto avaiable 
	
	State avaiable{
		[# areaFree = true #]
		println("ok | OUTDOOR ")
	}
	Transition t0 	whenMsg pickup   -> handleToken
					whenEvent pickup -> handleToken
	
	State handleToken{
		onMsg (pickup : pickup(tokenID)){
				[# var token = payloadArg(0) #]}

		//forward tokenhandler -m token : tokenID($token)
		
			delay 500 //attesa per l'elaborazione del tokenhandler
		println("checking Trolley status | OUTDOOR")
	}  
	Goto picking 
	 
	State picking{
	 	
		[# trolleyStatus = false #]
		println("Trolley picking car | OUTDOOR")
		delay 4000
		println("Car is in Outdoor area")
		[# areaFree = false #]
		forward outdoortimer -m timerstart : timerstart(ok)
		forward outsonar -m startSonar : startSonar(on)
	
		// Il trolley deve essere liberato già prima della risposta del timer/sonar ???
	}
	Transition t0 	whenEvent sensor  -> withdrawn
					whenEvent timeout -> timeout
 
	
	State withdrawn{
		println("Car withdrawn!")
		forward outdoortimer -m timerstop : timerstop(off)
	} 
	Goto avaiable
	
	State timeout{
		println("%%%% TIMEOUT %%%%" )
		forward outsonar -m stopSonar : stopSonar(off)
		emit timeout : timeout(alarm)		
	}
		
}

QActor clientsimulator context ctxParkingservice{
	[# var n=4 #]
	State s0 initial {
		if[# n>0 #]{
			//emit pickup : pickup(0000)
			forward outdoor -m pickup : pickup(pickup)
			[# n = n-1 #]
			updateResource[#"$n"#]
			delay 4000
		}
				
	}Goto s0
	
}


//bozza per testare il thermometerSimulator
QActor parkingmanager context ctxParkingservice{

	[#
	lateinit var thermometerActor : ActorBasic
	var T = "0" 
	#]	
 
	State s0 initial{			
		[# thermometerActor = sysUtil.getActor("thermometer")!! #]
		forward thermometer -m startThermometer : startThermometer(ok)
	}
	Transition t0  whenEvent thermometer -> handleTemperature

	State handleTemperature{
	
		onMsg( thermometer : termperature(D) ){ 
	  		 	[# T = payloadArg(0) #]
	  		 	//emit temperature : temperature($T) //for application level
		}
		updateResource [# "$T" #]  //after this we can use $T in qak, out of [##]
		println("temperature=$T")
	}Transition t0 whenEvent thermometer -> handleTemperature
}

/*   
QActor trolley context ctxParkingservice{
[#
val mapname     = "parkingMap"  		 
var Myself      = myself   
var CurrentPlannedMove = "" 
#] 
	State s0 initial {	 
     	run itunibo.planner.plannerUtil.initAI()
		println("&&&  trolley loads the parking map from the given file ...") 
		run itunibo.planner.plannerUtil.loadRoomMap("$mapname") 
		//Set the parking area ...
  		//run itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection()
		run itunibo.planner.plannerUtil.showMap( )   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	
     	run pathexecutil.register( Myself ) 
   	}
   	Goto moveToIndoor  
   	
   	State setParkingArea{
   		//run itunibo.planner.plannerUtil.planForGoal("1","1")
   		//TODO
   	}

  	State moveToIndoor{  	
  		 run itunibo.planner.plannerUtil.planForGoal("6","0")
   	} 
    Goto execPlannedMoves     
    
	State execPlannedMoves{   
		delay 300
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove")
 	}
 	Goto doMove if [# CurrentPlannedMove.length>0 #] else parkthecar
 
 	State doMove{ 		
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else turnMove
 	
 	State wMove {     
 		qrun pathexecutil.doMove(myself, "p" )  
 	}
 	Transition t0 whenMsg moveok   -> stepDone   
  	
 	 State stepDone{  
 	 	printCurrentMessage
 		//updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )
 		//updateResource [# "stepDone" # ]
  	} 
 	Goto execPlannedMoves
 	
 	State turnMove{
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			qrun pathexecutil.doMove(myself, "$CurrentPlannedMove")
  		} 
 	}   
  	Transition t0  whenMsg moveok   -> rotationDone


 	State rotationDone{
 		run itunibo.planner.plannerUtil.updateMap(  "$CurrentPlannedMove" )
   		//run itunibo.planner.plannerUtil.showCurrentRobotState( )
 	} 
 	 Goto execPlannedMoves
 	
 	State parkthecar{
 		printCurrentMessage  
 		
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )  
 		//if [# ! itunibo.planner.plannerUtil.atHome() #]{
 		if [# ! itunibo.planner.plannerUtil.atPos(4,1) #]{
 			//move to a parking cell (3,1)
 			run itunibo.planner.plannerUtil.planForGoal("4","1")
 		}else{
 			run itunibo.planner.plannerUtil.planForGoal("0","0")
 		}
 	} 
    Goto execPlannedMoves  if[# ! itunibo.planner.plannerUtil.atHome() #] else  end

	State end{
		println("AT HOME ...")
	}
}
	
*/


